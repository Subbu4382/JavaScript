Global object --> window , this
     in js everything is an object 
     console.log("arguments")
     console-->is an object
     log -->is a method
     we have to use (.) notation to access methods in a object
     and if any method or object is direct method or object to global object(window or this) then we can directly access that method 
     example: alert(),prompt()

camel case : myNameIs
sanke case : my_name_is
kabab case : my-name-is
paskel case : myNameIs

 
Object can be called in two ways
1) Dot notation---object.method()
  in some cases we cant use dot notatoion 
  example : object."full name" we cant access this
  cannot have spaces, special charecters or keys starting with numbers
2) Square Notation[]--object[method()] 

for non primitive datatypes reference is copied not values in primitive datatypes values are copied
 
Shallow copy/ cloning : 
object.assign()
        this method is used to copy the values of all properties from one or more source objects to a target object
spread operator{...}
     {
          ...object
     }
     we cant modify existing object using spread operator

deep Copy :

student={

}
let student1=StructuredClone(student)
functions will be not cloned while using StructuredClone 

# Object.keys()--to get keys 
object.values()--to get values 
object.items()--to get properties

# Property flags
    1)Object.freeze()--prevents any changes to an object,including adding,modifying or deleting properties
                    --it sets configurable,writable to false for all properties of the object
    2)object.seal()--prevents new properties from being added or existing properties from being deleted but we can update values
    3)object.preventExtensions()--prevents new properties from being added to an object
                                --existing properties can still be modified or deleted

"use strict"---makes code in a strict mode and gives errors if there is any minor mistakes

object.getownpropertydiscriptor(objectname,"key")--gives flags of the key in a object
object.getownpropertydiscriptors(objectname)--gives flage of all keys in a object

every property has three flags:
     --writable: if true we cna change the property value if false we cant change the value 
     --enumerable: if true we can access property in loops or methods if false we cant asscess the property
     --configurable: if false we cant delete the property
object.defineproperty(objectname,"key",{
     we can modify the flags
     writable:false
     enumerable:false
     configurable:false
})


foreach()
map()
reduce()

addAdjacentElement()